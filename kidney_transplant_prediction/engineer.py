# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_EDA.ipynb.

# %% auto 0
__all__ = ['df_pheno', 'features', 'dict_prd_rev', 'feature_engineering']

# %% ../nbs/01_EDA.ipynb 4
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from math import ceil
import os

# %% ../nbs/01_EDA.ipynb 5
# Setting current working directory to root of repo
if os.getcwd().split('/')[-1] == 'nbs':
    os.chdir('../')

df_pheno = pd.read_pickle('data/proc/pheno_imp.pkl')

# %% ../nbs/01_EDA.ipynb 17
def feature_engineering(df_pheno:pd.DataFrame # DataFrame input to be engineered
                       ):
    '''
    Returns a dataframe with new engineering features, a list of the new features and a dictionary for Primary Renal Disease values.
    '''
    df_pheno['AgeDifference'] = df_pheno.eval('DonAge - RecAge')
    df_pheno['SexMismatch'] = df_pheno.eval('DonSex_num == RecSex_num')
    
    # A list of Primary Renal Diseases that make up more than 1% of the dataset
    diseases = list(df_pheno.PrimaryRenalDisease.value_counts(normalize=True)[
        (df_pheno.PrimaryRenalDisease.value_counts(normalize=True) > 0.01)
    ].index)
    
    # Removing this variable as it is useless
    diseases.remove('Other')
    
    # Creating a list of values for each disease to map to
    prd_values = ['PKD_AdultDominantType',
     'IgA_Nephropathy',
     'Glomerulonephritis_HistExamined',
     'Diabetes_I',
     'PIN_WithVUReflux_WithoutObstruction', # PIN is Pyelonephritis/Interstitial Nephritis
     'RVDHypertension', # RVD is Renal Vascular Disease
     'PIN_NoCause',
     'Glomerulonephritis_HistNotExamined',
     'PIN_ChronicObstructiveUropathy_WithWithoutVUReflux',
     'MembranousNephropathy',
     'AlportsSyndrome',
     'Diabetes_II',
     'LupusErythematosus',
     'RVDMalignantHypertension',
     'HereditaryNephropathy_Unspecified',
     "WegenerGranulomatosis"]
    
    # Creating dictionaries for to map values back and forth
    dict_prd = dict(zip(diseases, prd_values))
    dict_prd_rev = dict(zip(prd_values, diseases))
    
    df_prd = pd.get_dummies(
        df_pheno.PrimaryRenalDisease.apply(
            # Selecting the fight diseases and creating a one-hot encoding
            lambda x: 'PRD_' + dict_prd[x] if x in diseases and x is not None else None
        )
    )
    
    # Joining to the phenotype dataset
    df_pheno = pd.concat([df_pheno, df_prd], axis=1)
    
    # Creating several aggregated variables that are groupings of indivdiual diseases
    df_pheno['PRD_Glomerulonephritis_agg'] = df_pheno.PRD_Glomerulonephritis_HistExamined \
    + df_pheno.PRD_Glomerulonephritis_HistNotExamined
    
    df_pheno['PRD_PIN_agg'] = df_pheno.PRD_PIN_WithVUReflux_WithoutObstruction \
    + df_pheno.PRD_PIN_NoCause + df_pheno.PRD_PIN_ChronicObstructiveUropathy_WithWithoutVUReflux
    
    df_pheno['PRD_RVD_agg'] = df_pheno.PRD_RVDHypertension \
    + df_pheno.PRD_RVDMalignantHypertension
    
    df_pheno['PRD_Diabetes_agg'] = df_pheno.PRD_Diabetes_I + df_pheno.PRD_Diabetes_II

    # Creating variables for Year, Month, Day and Season of Transplant
    df_pheno['Year'] = df_pheno.GraftDate.dt.year

    df_pheno['Month'] = df_pheno.GraftDate.dt.month

    df_pheno['Day'] = df_pheno.GraftDate.dt.day

    seasons = {
        2: 'Spring',
        3: 'Spring',
        4: 'Spring',
        5: 'Summer',
        6: 'Summer',
        7: 'Summer',
        8: 'Autumn',
        9: 'Autumn',
        10: 'Autumn',
        11: 'Winter',
        12: 'Winter',
        1: 'Winter',    
    }
    df_pheno['Season'] = pd.Categorical(
        df_pheno.Month.map(seasons), 
        categories = ['Spring', 'Summer', 'Autumn', 'Winter'], 
        ordered=True
    )
    df_pheno['Season_num'] = df_pheno.Season.cat.codes
    
    # Creating a Binary variable to capture the difference between extreme mismatches and the rest
    df_pheno['HLAMismatches_bin'] = df_pheno.HLAMismatches >= 5

    # Squared variables used to capture non-linear relationships
    features_sq = [
        'DonAge'
        ,'RecAge'
        ,'HLAMismatches'
        ,'AgeDifference'
    ]
    for feature in features_sq:
        df_pheno[feature + '_sqrd'] = df_pheno[feature] ** 2

    # Creating interaction variables to capture relationship between donor and recipient age
    features_inter = [
        ('DonAge', 'RecAge')
    ]
    for feat1, feat2 in features_inter:
        df_pheno[feat1 + '_X_' + feat2] = round(df_pheno[feat1] * df_pheno[feat2] / 50)

    features = [feature + '_sqrd' for feature in features_sq] \
        + ['Year', 'Month', 'Day', 'Season_num'] \
        + [feat1 + '_X_' + feat2 for feat1, feat2 in features_inter] \
        + [col for col in df_pheno.columns if col.endswith('_bin')] \
        + [col for col in df_pheno.columns if col.startswith('PRD_')]
    return df_pheno, features, dict_prd_rev

df_pheno, features, dict_prd_rev = feature_engineering(df_pheno)

# %% ../nbs/01_EDA.ipynb 53
# export to pickle and csv
df_pheno.to_pickle('data/proc/pheno_eng.pkl')
df_pheno.to_csv('data/proc/pheno_eng.csv')
